// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: command.proto

package command

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InitVertex struct {
	VertexId string `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
}

func (m *InitVertex) Reset()      { *m = InitVertex{} }
func (*InitVertex) ProtoMessage() {}
func (*InitVertex) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}
func (m *InitVertex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitVertex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitVertex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitVertex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitVertex.Merge(m, src)
}
func (m *InitVertex) XXX_Size() int {
	return m.Size()
}
func (m *InitVertex) XXX_DiscardUnknown() {
	xxx_messageInfo_InitVertex.DiscardUnknown(m)
}

var xxx_messageInfo_InitVertex proto.InternalMessageInfo

func (m *InitVertex) GetVertexId() string {
	if m != nil {
		return m.VertexId
	}
	return ""
}

type InitVertexAck struct {
	VertexId string `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
}

func (m *InitVertexAck) Reset()      { *m = InitVertexAck{} }
func (*InitVertexAck) ProtoMessage() {}
func (*InitVertexAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1}
}
func (m *InitVertexAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitVertexAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitVertexAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitVertexAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitVertexAck.Merge(m, src)
}
func (m *InitVertexAck) XXX_Size() int {
	return m.Size()
}
func (m *InitVertexAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InitVertexAck.DiscardUnknown(m)
}

var xxx_messageInfo_InitVertexAck proto.InternalMessageInfo

func (m *InitVertexAck) GetVertexId() string {
	if m != nil {
		return m.VertexId
	}
	return ""
}

type LoadVertex struct {
}

func (m *LoadVertex) Reset()      { *m = LoadVertex{} }
func (*LoadVertex) ProtoMessage() {}
func (*LoadVertex) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{2}
}
func (m *LoadVertex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadVertex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadVertex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadVertex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadVertex.Merge(m, src)
}
func (m *LoadVertex) XXX_Size() int {
	return m.Size()
}
func (m *LoadVertex) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadVertex.DiscardUnknown(m)
}

var xxx_messageInfo_LoadVertex proto.InternalMessageInfo

type LoadVertexAck struct {
	VertexId string `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
}

func (m *LoadVertexAck) Reset()      { *m = LoadVertexAck{} }
func (*LoadVertexAck) ProtoMessage() {}
func (*LoadVertexAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{3}
}
func (m *LoadVertexAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadVertexAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadVertexAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadVertexAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadVertexAck.Merge(m, src)
}
func (m *LoadVertexAck) XXX_Size() int {
	return m.Size()
}
func (m *LoadVertexAck) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadVertexAck.DiscardUnknown(m)
}

var xxx_messageInfo_LoadVertexAck proto.InternalMessageInfo

func (m *LoadVertexAck) GetVertexId() string {
	if m != nil {
		return m.VertexId
	}
	return ""
}

type Compute struct {
	SuperStep uint64 `protobuf:"varint,1,opt,name=super_step,json=superStep,proto3" json:"super_step,omitempty"`
}

func (m *Compute) Reset()      { *m = Compute{} }
func (*Compute) ProtoMessage() {}
func (*Compute) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{4}
}
func (m *Compute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Compute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Compute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Compute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compute.Merge(m, src)
}
func (m *Compute) XXX_Size() int {
	return m.Size()
}
func (m *Compute) XXX_DiscardUnknown() {
	xxx_messageInfo_Compute.DiscardUnknown(m)
}

var xxx_messageInfo_Compute proto.InternalMessageInfo

func (m *Compute) GetSuperStep() uint64 {
	if m != nil {
		return m.SuperStep
	}
	return 0
}

type ComputeAck struct {
	VertexId string `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
	Halted   bool   `protobuf:"varint,2,opt,name=halted,proto3" json:"halted,omitempty"`
}

func (m *ComputeAck) Reset()      { *m = ComputeAck{} }
func (*ComputeAck) ProtoMessage() {}
func (*ComputeAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{5}
}
func (m *ComputeAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAck.Merge(m, src)
}
func (m *ComputeAck) XXX_Size() int {
	return m.Size()
}
func (m *ComputeAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAck.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAck proto.InternalMessageInfo

func (m *ComputeAck) GetVertexId() string {
	if m != nil {
		return m.VertexId
	}
	return ""
}

func (m *ComputeAck) GetHalted() bool {
	if m != nil {
		return m.Halted
	}
	return false
}

type SuperStepMessage struct {
	Uuid         string     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SuperStep    uint64     `protobuf:"varint,2,opt,name=super_step,json=superStep,proto3" json:"super_step,omitempty"`
	SrcVertexId  string     `protobuf:"bytes,3,opt,name=src_vertex_id,json=srcVertexId,proto3" json:"src_vertex_id,omitempty"`
	DestVertexId string     `protobuf:"bytes,4,opt,name=dest_vertex_id,json=destVertexId,proto3" json:"dest_vertex_id,omitempty"`
	Message      *types.Any `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SuperStepMessage) Reset()      { *m = SuperStepMessage{} }
func (*SuperStepMessage) ProtoMessage() {}
func (*SuperStepMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{6}
}
func (m *SuperStepMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperStepMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperStepMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperStepMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperStepMessage.Merge(m, src)
}
func (m *SuperStepMessage) XXX_Size() int {
	return m.Size()
}
func (m *SuperStepMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperStepMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SuperStepMessage proto.InternalMessageInfo

func (m *SuperStepMessage) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SuperStepMessage) GetSuperStep() uint64 {
	if m != nil {
		return m.SuperStep
	}
	return 0
}

func (m *SuperStepMessage) GetSrcVertexId() string {
	if m != nil {
		return m.SrcVertexId
	}
	return ""
}

func (m *SuperStepMessage) GetDestVertexId() string {
	if m != nil {
		return m.DestVertexId
	}
	return ""
}

func (m *SuperStepMessage) GetMessage() *types.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

// SuperStepMessageAck is used to guarantee receipt messages at each end of super step
type SuperStepMessageAck struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *SuperStepMessageAck) Reset()      { *m = SuperStepMessageAck{} }
func (*SuperStepMessageAck) ProtoMessage() {}
func (*SuperStepMessageAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{7}
}
func (m *SuperStepMessageAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperStepMessageAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperStepMessageAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperStepMessageAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperStepMessageAck.Merge(m, src)
}
func (m *SuperStepMessageAck) XXX_Size() int {
	return m.Size()
}
func (m *SuperStepMessageAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperStepMessageAck.DiscardUnknown(m)
}

var xxx_messageInfo_SuperStepMessageAck proto.InternalMessageInfo

func (m *SuperStepMessageAck) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type InitPartition struct {
	PartitionId    uint64 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	NrOfPartitions uint64 `protobuf:"varint,2,opt,name=nr_of_partitions,json=nrOfPartitions,proto3" json:"nr_of_partitions,omitempty"`
}

func (m *InitPartition) Reset()      { *m = InitPartition{} }
func (*InitPartition) ProtoMessage() {}
func (*InitPartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{8}
}
func (m *InitPartition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitPartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitPartition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitPartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitPartition.Merge(m, src)
}
func (m *InitPartition) XXX_Size() int {
	return m.Size()
}
func (m *InitPartition) XXX_DiscardUnknown() {
	xxx_messageInfo_InitPartition.DiscardUnknown(m)
}

var xxx_messageInfo_InitPartition proto.InternalMessageInfo

func (m *InitPartition) GetPartitionId() uint64 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *InitPartition) GetNrOfPartitions() uint64 {
	if m != nil {
		return m.NrOfPartitions
	}
	return 0
}

type InitPartitionAck struct {
	PartitionId uint64 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (m *InitPartitionAck) Reset()      { *m = InitPartitionAck{} }
func (*InitPartitionAck) ProtoMessage() {}
func (*InitPartitionAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{9}
}
func (m *InitPartitionAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitPartitionAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitPartitionAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitPartitionAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitPartitionAck.Merge(m, src)
}
func (m *InitPartitionAck) XXX_Size() int {
	return m.Size()
}
func (m *InitPartitionAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InitPartitionAck.DiscardUnknown(m)
}

var xxx_messageInfo_InitPartitionAck proto.InternalMessageInfo

func (m *InitPartitionAck) GetPartitionId() uint64 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func init() {
	proto.RegisterType((*InitVertex)(nil), "InitVertex")
	proto.RegisterType((*InitVertexAck)(nil), "InitVertexAck")
	proto.RegisterType((*LoadVertex)(nil), "LoadVertex")
	proto.RegisterType((*LoadVertexAck)(nil), "LoadVertexAck")
	proto.RegisterType((*Compute)(nil), "Compute")
	proto.RegisterType((*ComputeAck)(nil), "ComputeAck")
	proto.RegisterType((*SuperStepMessage)(nil), "SuperStepMessage")
	proto.RegisterType((*SuperStepMessageAck)(nil), "SuperStepMessageAck")
	proto.RegisterType((*InitPartition)(nil), "InitPartition")
	proto.RegisterType((*InitPartitionAck)(nil), "InitPartitionAck")
}

func init() { proto.RegisterFile("command.proto", fileDescriptor_213c0bb044472049) }

var fileDescriptor_213c0bb044472049 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcb, 0xea, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0x35, 0xf6, 0x72, 0x7a, 0xa1, 0x8c, 0x22, 0x55, 0x71, 0xa8, 0x83, 0x8b, 0x14,
	0x24, 0x05, 0x2f, 0x0f, 0x50, 0x5d, 0x15, 0x14, 0x25, 0x85, 0xae, 0x84, 0x90, 0x26, 0xd3, 0x1a,
	0x6c, 0x32, 0x61, 0x66, 0x22, 0x76, 0xe7, 0x23, 0xf8, 0x18, 0xbe, 0x85, 0x5b, 0x97, 0x5d, 0x76,
	0x69, 0xd3, 0x8d, 0xcb, 0x3e, 0x82, 0x64, 0xd2, 0xa4, 0x5a, 0xe4, 0xdf, 0xdd, 0x9c, 0x2f, 0xbf,
	0xf3, 0xe5, 0x3b, 0xe7, 0x40, 0xd7, 0xe7, 0x51, 0xe4, 0xc5, 0x81, 0x9d, 0x08, 0xae, 0xf8, 0x83,
	0xfb, 0x2b, 0xce, 0x57, 0x6b, 0x36, 0xd6, 0xd5, 0x22, 0x5d, 0x8e, 0xbd, 0x78, 0x53, 0x7c, 0xa2,
	0x23, 0x80, 0x69, 0x1c, 0xaa, 0x39, 0x13, 0x8a, 0x7d, 0xc1, 0x0f, 0xa1, 0xf5, 0x59, 0xbf, 0xdc,
	0x30, 0x18, 0xa0, 0x21, 0xb2, 0x5a, 0x4e, 0xb3, 0x10, 0xa6, 0x01, 0x7d, 0x0a, 0xdd, 0x33, 0x3a,
	0xf1, 0x3f, 0xdd, 0x4c, 0x77, 0x00, 0xde, 0x70, 0x2f, 0x28, 0xe8, 0xbc, 0xf7, 0x5c, 0x5d, 0xed,
	0xb5, 0xa0, 0xf1, 0x9a, 0x47, 0x49, 0xaa, 0x18, 0x7e, 0x04, 0x20, 0xd3, 0x84, 0x09, 0x57, 0x2a,
	0x96, 0x68, 0xd0, 0x74, 0x5a, 0x5a, 0x99, 0x29, 0x96, 0xd0, 0x09, 0xc0, 0x89, 0xbc, 0x66, 0x8a,
	0xef, 0x41, 0xfd, 0xa3, 0xb7, 0x56, 0x2c, 0x18, 0xd4, 0x86, 0xc8, 0x6a, 0x3a, 0xa7, 0x8a, 0xfe,
	0x40, 0xd0, 0x9f, 0x95, 0x86, 0x6f, 0x99, 0x94, 0xde, 0x8a, 0x61, 0x0c, 0x66, 0x9a, 0x56, 0x26,
	0xfa, 0x7d, 0x11, 0xa5, 0x76, 0x11, 0x05, 0x53, 0xe8, 0x4a, 0xe1, 0xbb, 0xe7, 0x00, 0xb7, 0x74,
	0x6f, 0x5b, 0x0a, 0x7f, 0x5e, 0x66, 0x78, 0x02, 0xbd, 0x80, 0x49, 0xf5, 0x17, 0x64, 0x6a, 0xa8,
	0x93, 0xab, 0x15, 0x65, 0x43, 0x23, 0x2a, 0x72, 0x0c, 0x6e, 0x0f, 0x91, 0xd5, 0x7e, 0x76, 0xd7,
	0x2e, 0x0e, 0x68, 0x97, 0x07, 0xb4, 0x27, 0xf1, 0xc6, 0x29, 0x21, 0x3a, 0x82, 0x3b, 0x97, 0x03,
	0xe4, 0xdb, 0xf8, 0xcf, 0x0c, 0xf4, 0x43, 0x71, 0xc3, 0xf7, 0x9e, 0x50, 0xa1, 0x0a, 0x79, 0x8c,
	0x1f, 0x43, 0x27, 0x29, 0x8b, 0x72, 0x6b, 0xa6, 0xd3, 0xae, 0xb4, 0x69, 0x80, 0x2d, 0xe8, 0xc7,
	0xc2, 0xe5, 0x4b, 0xb7, 0x12, 0xe5, 0x69, 0xfa, 0x5e, 0x2c, 0xde, 0x2d, 0x2b, 0x2f, 0x49, 0x5f,
	0x42, 0xff, 0x1f, 0xf7, 0x3c, 0xc5, 0xf5, 0x1f, 0xbc, 0x7a, 0xb1, 0xdd, 0x13, 0x63, 0xb7, 0x27,
	0xc6, 0x71, 0x4f, 0xd0, 0xd7, 0x8c, 0xa0, 0xef, 0x19, 0x41, 0x3f, 0x33, 0x82, 0xb6, 0x19, 0x41,
	0xbf, 0x32, 0x82, 0x7e, 0x67, 0xc4, 0x38, 0x66, 0x04, 0x7d, 0x3b, 0x10, 0x63, 0x7b, 0x20, 0xc6,
	0xee, 0x40, 0x8c, 0x45, 0x5d, 0x2f, 0xe3, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0x5e,
	0x30, 0x9b, 0xec, 0x02, 0x00, 0x00,
}

func (this *InitVertex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitVertex)
	if !ok {
		that2, ok := that.(InitVertex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexId != that1.VertexId {
		return false
	}
	return true
}
func (this *InitVertexAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitVertexAck)
	if !ok {
		that2, ok := that.(InitVertexAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexId != that1.VertexId {
		return false
	}
	return true
}
func (this *LoadVertex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadVertex)
	if !ok {
		that2, ok := that.(LoadVertex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LoadVertexAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadVertexAck)
	if !ok {
		that2, ok := that.(LoadVertexAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexId != that1.VertexId {
		return false
	}
	return true
}
func (this *Compute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Compute)
	if !ok {
		that2, ok := that.(Compute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SuperStep != that1.SuperStep {
		return false
	}
	return true
}
func (this *ComputeAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputeAck)
	if !ok {
		that2, ok := that.(ComputeAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexId != that1.VertexId {
		return false
	}
	if this.Halted != that1.Halted {
		return false
	}
	return true
}
func (this *SuperStepMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperStepMessage)
	if !ok {
		that2, ok := that.(SuperStepMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.SuperStep != that1.SuperStep {
		return false
	}
	if this.SrcVertexId != that1.SrcVertexId {
		return false
	}
	if this.DestVertexId != that1.DestVertexId {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *SuperStepMessageAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperStepMessageAck)
	if !ok {
		that2, ok := that.(SuperStepMessageAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	return true
}
func (this *InitPartition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitPartition)
	if !ok {
		that2, ok := that.(InitPartition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionId != that1.PartitionId {
		return false
	}
	if this.NrOfPartitions != that1.NrOfPartitions {
		return false
	}
	return true
}
func (this *InitPartitionAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitPartitionAck)
	if !ok {
		that2, ok := that.(InitPartitionAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionId != that1.PartitionId {
		return false
	}
	return true
}
func (this *InitVertex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.InitVertex{")
	s = append(s, "VertexId: "+fmt.Sprintf("%#v", this.VertexId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitVertexAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.InitVertexAck{")
	s = append(s, "VertexId: "+fmt.Sprintf("%#v", this.VertexId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadVertex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&command.LoadVertex{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadVertexAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.LoadVertexAck{")
	s = append(s, "VertexId: "+fmt.Sprintf("%#v", this.VertexId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Compute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.Compute{")
	s = append(s, "SuperStep: "+fmt.Sprintf("%#v", this.SuperStep)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputeAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.ComputeAck{")
	s = append(s, "VertexId: "+fmt.Sprintf("%#v", this.VertexId)+",\n")
	s = append(s, "Halted: "+fmt.Sprintf("%#v", this.Halted)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperStepMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&command.SuperStepMessage{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "SuperStep: "+fmt.Sprintf("%#v", this.SuperStep)+",\n")
	s = append(s, "SrcVertexId: "+fmt.Sprintf("%#v", this.SrcVertexId)+",\n")
	s = append(s, "DestVertexId: "+fmt.Sprintf("%#v", this.DestVertexId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperStepMessageAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.SuperStepMessageAck{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitPartition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.InitPartition{")
	s = append(s, "PartitionId: "+fmt.Sprintf("%#v", this.PartitionId)+",\n")
	s = append(s, "NrOfPartitions: "+fmt.Sprintf("%#v", this.NrOfPartitions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitPartitionAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.InitPartitionAck{")
	s = append(s, "PartitionId: "+fmt.Sprintf("%#v", this.PartitionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCommand(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InitVertex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitVertex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VertexId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.VertexId)))
		i += copy(dAtA[i:], m.VertexId)
	}
	return i, nil
}

func (m *InitVertexAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitVertexAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VertexId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.VertexId)))
		i += copy(dAtA[i:], m.VertexId)
	}
	return i, nil
}

func (m *LoadVertex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadVertex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LoadVertexAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadVertexAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VertexId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.VertexId)))
		i += copy(dAtA[i:], m.VertexId)
	}
	return i, nil
}

func (m *Compute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SuperStep != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.SuperStep))
	}
	return i, nil
}

func (m *ComputeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VertexId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.VertexId)))
		i += copy(dAtA[i:], m.VertexId)
	}
	if m.Halted {
		dAtA[i] = 0x10
		i++
		if m.Halted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SuperStepMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperStepMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if m.SuperStep != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.SuperStep))
	}
	if len(m.SrcVertexId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.SrcVertexId)))
		i += copy(dAtA[i:], m.SrcVertexId)
	}
	if len(m.DestVertexId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.DestVertexId)))
		i += copy(dAtA[i:], m.DestVertexId)
	}
	if m.Message != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SuperStepMessageAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperStepMessageAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	return i, nil
}

func (m *InitPartition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitPartition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.PartitionId))
	}
	if m.NrOfPartitions != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.NrOfPartitions))
	}
	return i, nil
}

func (m *InitPartitionAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitPartitionAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.PartitionId))
	}
	return i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InitVertex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *InitVertexAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *LoadVertex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LoadVertexAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *Compute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SuperStep != 0 {
		n += 1 + sovCommand(uint64(m.SuperStep))
	}
	return n
}

func (m *ComputeAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Halted {
		n += 2
	}
	return n
}

func (m *SuperStepMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.SuperStep != 0 {
		n += 1 + sovCommand(uint64(m.SuperStep))
	}
	l = len(m.SrcVertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.DestVertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *SuperStepMessageAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *InitPartition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionId != 0 {
		n += 1 + sovCommand(uint64(m.PartitionId))
	}
	if m.NrOfPartitions != 0 {
		n += 1 + sovCommand(uint64(m.NrOfPartitions))
	}
	return n
}

func (m *InitPartitionAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionId != 0 {
		n += 1 + sovCommand(uint64(m.PartitionId))
	}
	return n
}

func sovCommand(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InitVertex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitVertex{`,
		`VertexId:` + fmt.Sprintf("%v", this.VertexId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitVertexAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitVertexAck{`,
		`VertexId:` + fmt.Sprintf("%v", this.VertexId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadVertex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadVertex{`,
		`}`,
	}, "")
	return s
}
func (this *LoadVertexAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadVertexAck{`,
		`VertexId:` + fmt.Sprintf("%v", this.VertexId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Compute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Compute{`,
		`SuperStep:` + fmt.Sprintf("%v", this.SuperStep) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputeAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputeAck{`,
		`VertexId:` + fmt.Sprintf("%v", this.VertexId) + `,`,
		`Halted:` + fmt.Sprintf("%v", this.Halted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuperStepMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperStepMessage{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`SuperStep:` + fmt.Sprintf("%v", this.SuperStep) + `,`,
		`SrcVertexId:` + fmt.Sprintf("%v", this.SrcVertexId) + `,`,
		`DestVertexId:` + fmt.Sprintf("%v", this.DestVertexId) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuperStepMessageAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperStepMessageAck{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitPartition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitPartition{`,
		`PartitionId:` + fmt.Sprintf("%v", this.PartitionId) + `,`,
		`NrOfPartitions:` + fmt.Sprintf("%v", this.NrOfPartitions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitPartitionAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitPartitionAck{`,
		`PartitionId:` + fmt.Sprintf("%v", this.PartitionId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommand(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InitVertex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitVertex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitVertex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitVertexAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitVertexAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitVertexAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadVertex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadVertex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadVertex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadVertexAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadVertexAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadVertexAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Compute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperStep", wireType)
			}
			m.SuperStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperStep |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Halted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperStepMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperStepMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperStepMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperStep", wireType)
			}
			m.SuperStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperStep |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcVertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcVertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestVertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestVertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &types.Any{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperStepMessageAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperStepMessageAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperStepMessageAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitPartition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitPartition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitPartition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfPartitions", wireType)
			}
			m.NrOfPartitions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfPartitions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitPartitionAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitPartitionAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitPartitionAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCommand
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommand(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCommand
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommand = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand   = fmt.Errorf("proto: integer overflow")
)
