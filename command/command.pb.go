// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: command.proto

package command

import (
	fmt "fmt"
	actor "github.com/AsynkronIT/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LoadVertex struct {
	VertexId string `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
}

func (m *LoadVertex) Reset()      { *m = LoadVertex{} }
func (*LoadVertex) ProtoMessage() {}
func (*LoadVertex) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}
func (m *LoadVertex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadVertex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadVertex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadVertex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadVertex.Merge(m, src)
}
func (m *LoadVertex) XXX_Size() int {
	return m.Size()
}
func (m *LoadVertex) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadVertex.DiscardUnknown(m)
}

var xxx_messageInfo_LoadVertex proto.InternalMessageInfo

func (m *LoadVertex) GetVertexId() string {
	if m != nil {
		return m.VertexId
	}
	return ""
}

type LoadVertexAck struct {
	VertexId string `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *LoadVertexAck) Reset()      { *m = LoadVertexAck{} }
func (*LoadVertexAck) ProtoMessage() {}
func (*LoadVertexAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1}
}
func (m *LoadVertexAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadVertexAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadVertexAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadVertexAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadVertexAck.Merge(m, src)
}
func (m *LoadVertexAck) XXX_Size() int {
	return m.Size()
}
func (m *LoadVertexAck) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadVertexAck.DiscardUnknown(m)
}

var xxx_messageInfo_LoadVertexAck proto.InternalMessageInfo

func (m *LoadVertexAck) GetVertexId() string {
	if m != nil {
		return m.VertexId
	}
	return ""
}

func (m *LoadVertexAck) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SuperStepBarrier struct {
}

func (m *SuperStepBarrier) Reset()      { *m = SuperStepBarrier{} }
func (*SuperStepBarrier) ProtoMessage() {}
func (*SuperStepBarrier) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{2}
}
func (m *SuperStepBarrier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperStepBarrier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperStepBarrier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperStepBarrier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperStepBarrier.Merge(m, src)
}
func (m *SuperStepBarrier) XXX_Size() int {
	return m.Size()
}
func (m *SuperStepBarrier) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperStepBarrier.DiscardUnknown(m)
}

var xxx_messageInfo_SuperStepBarrier proto.InternalMessageInfo

type SuperStepBarrierAck struct {
	VertexId string `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
}

func (m *SuperStepBarrierAck) Reset()      { *m = SuperStepBarrierAck{} }
func (*SuperStepBarrierAck) ProtoMessage() {}
func (*SuperStepBarrierAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{3}
}
func (m *SuperStepBarrierAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperStepBarrierAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperStepBarrierAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperStepBarrierAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperStepBarrierAck.Merge(m, src)
}
func (m *SuperStepBarrierAck) XXX_Size() int {
	return m.Size()
}
func (m *SuperStepBarrierAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperStepBarrierAck.DiscardUnknown(m)
}

var xxx_messageInfo_SuperStepBarrierAck proto.InternalMessageInfo

func (m *SuperStepBarrierAck) GetVertexId() string {
	if m != nil {
		return m.VertexId
	}
	return ""
}

type SuperStepBarrierPartitionAck struct {
	PartitionId uint64 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (m *SuperStepBarrierPartitionAck) Reset()      { *m = SuperStepBarrierPartitionAck{} }
func (*SuperStepBarrierPartitionAck) ProtoMessage() {}
func (*SuperStepBarrierPartitionAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{4}
}
func (m *SuperStepBarrierPartitionAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperStepBarrierPartitionAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperStepBarrierPartitionAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperStepBarrierPartitionAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperStepBarrierPartitionAck.Merge(m, src)
}
func (m *SuperStepBarrierPartitionAck) XXX_Size() int {
	return m.Size()
}
func (m *SuperStepBarrierPartitionAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperStepBarrierPartitionAck.DiscardUnknown(m)
}

var xxx_messageInfo_SuperStepBarrierPartitionAck proto.InternalMessageInfo

func (m *SuperStepBarrierPartitionAck) GetPartitionId() uint64 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

type SuperStepBarrierWorkerAck struct {
	WorkerPid *actor.PID `protobuf:"bytes,1,opt,name=worker_pid,json=workerPid,proto3" json:"worker_pid,omitempty"`
}

func (m *SuperStepBarrierWorkerAck) Reset()      { *m = SuperStepBarrierWorkerAck{} }
func (*SuperStepBarrierWorkerAck) ProtoMessage() {}
func (*SuperStepBarrierWorkerAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{5}
}
func (m *SuperStepBarrierWorkerAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperStepBarrierWorkerAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperStepBarrierWorkerAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperStepBarrierWorkerAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperStepBarrierWorkerAck.Merge(m, src)
}
func (m *SuperStepBarrierWorkerAck) XXX_Size() int {
	return m.Size()
}
func (m *SuperStepBarrierWorkerAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperStepBarrierWorkerAck.DiscardUnknown(m)
}

var xxx_messageInfo_SuperStepBarrierWorkerAck proto.InternalMessageInfo

func (m *SuperStepBarrierWorkerAck) GetWorkerPid() *actor.PID {
	if m != nil {
		return m.WorkerPid
	}
	return nil
}

type Compute struct {
	SuperStep        uint64                `protobuf:"varint,1,opt,name=super_step,json=superStep,proto3" json:"super_step,omitempty"`
	AggregatedValues map[string]*types.Any `protobuf:"bytes,2,rep,name=aggregated_values,json=aggregatedValues,proto3" json:"aggregated_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Compute) Reset()      { *m = Compute{} }
func (*Compute) ProtoMessage() {}
func (*Compute) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{6}
}
func (m *Compute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Compute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Compute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Compute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compute.Merge(m, src)
}
func (m *Compute) XXX_Size() int {
	return m.Size()
}
func (m *Compute) XXX_DiscardUnknown() {
	xxx_messageInfo_Compute.DiscardUnknown(m)
}

var xxx_messageInfo_Compute proto.InternalMessageInfo

func (m *Compute) GetSuperStep() uint64 {
	if m != nil {
		return m.SuperStep
	}
	return 0
}

func (m *Compute) GetAggregatedValues() map[string]*types.Any {
	if m != nil {
		return m.AggregatedValues
	}
	return nil
}

type ComputeAck struct {
	VertexId         string                `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
	Halted           bool                  `protobuf:"varint,2,opt,name=halted,proto3" json:"halted,omitempty"`
	AggregatedValues map[string]*types.Any `protobuf:"bytes,3,rep,name=aggregated_values,json=aggregatedValues,proto3" json:"aggregated_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ComputeAck) Reset()      { *m = ComputeAck{} }
func (*ComputeAck) ProtoMessage() {}
func (*ComputeAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{7}
}
func (m *ComputeAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAck.Merge(m, src)
}
func (m *ComputeAck) XXX_Size() int {
	return m.Size()
}
func (m *ComputeAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAck.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAck proto.InternalMessageInfo

func (m *ComputeAck) GetVertexId() string {
	if m != nil {
		return m.VertexId
	}
	return ""
}

func (m *ComputeAck) GetHalted() bool {
	if m != nil {
		return m.Halted
	}
	return false
}

func (m *ComputeAck) GetAggregatedValues() map[string]*types.Any {
	if m != nil {
		return m.AggregatedValues
	}
	return nil
}

type ComputePartitionAck struct {
	PartitionId      uint64                `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	AggregatedValues map[string]*types.Any `protobuf:"bytes,2,rep,name=aggregated_values,json=aggregatedValues,proto3" json:"aggregated_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ComputePartitionAck) Reset()      { *m = ComputePartitionAck{} }
func (*ComputePartitionAck) ProtoMessage() {}
func (*ComputePartitionAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{8}
}
func (m *ComputePartitionAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputePartitionAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputePartitionAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputePartitionAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputePartitionAck.Merge(m, src)
}
func (m *ComputePartitionAck) XXX_Size() int {
	return m.Size()
}
func (m *ComputePartitionAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputePartitionAck.DiscardUnknown(m)
}

var xxx_messageInfo_ComputePartitionAck proto.InternalMessageInfo

func (m *ComputePartitionAck) GetPartitionId() uint64 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *ComputePartitionAck) GetAggregatedValues() map[string]*types.Any {
	if m != nil {
		return m.AggregatedValues
	}
	return nil
}

type ComputeWorkerAck struct {
	WorkerPid        *actor.PID            `protobuf:"bytes,1,opt,name=worker_pid,json=workerPid,proto3" json:"worker_pid,omitempty"`
	AggregatedValues map[string]*types.Any `protobuf:"bytes,2,rep,name=aggregated_values,json=aggregatedValues,proto3" json:"aggregated_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ComputeWorkerAck) Reset()      { *m = ComputeWorkerAck{} }
func (*ComputeWorkerAck) ProtoMessage() {}
func (*ComputeWorkerAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{9}
}
func (m *ComputeWorkerAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeWorkerAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeWorkerAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeWorkerAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeWorkerAck.Merge(m, src)
}
func (m *ComputeWorkerAck) XXX_Size() int {
	return m.Size()
}
func (m *ComputeWorkerAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeWorkerAck.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeWorkerAck proto.InternalMessageInfo

func (m *ComputeWorkerAck) GetWorkerPid() *actor.PID {
	if m != nil {
		return m.WorkerPid
	}
	return nil
}

func (m *ComputeWorkerAck) GetAggregatedValues() map[string]*types.Any {
	if m != nil {
		return m.AggregatedValues
	}
	return nil
}

type SuperStepMessage struct {
	Uuid         string     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SuperStep    uint64     `protobuf:"varint,2,opt,name=super_step,json=superStep,proto3" json:"super_step,omitempty"`
	SrcVertexId  string     `protobuf:"bytes,3,opt,name=src_vertex_id,json=srcVertexId,proto3" json:"src_vertex_id,omitempty"`
	DestVertexId string     `protobuf:"bytes,4,opt,name=dest_vertex_id,json=destVertexId,proto3" json:"dest_vertex_id,omitempty"`
	Message      *types.Any `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SuperStepMessage) Reset()      { *m = SuperStepMessage{} }
func (*SuperStepMessage) ProtoMessage() {}
func (*SuperStepMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{10}
}
func (m *SuperStepMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperStepMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperStepMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperStepMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperStepMessage.Merge(m, src)
}
func (m *SuperStepMessage) XXX_Size() int {
	return m.Size()
}
func (m *SuperStepMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperStepMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SuperStepMessage proto.InternalMessageInfo

func (m *SuperStepMessage) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SuperStepMessage) GetSuperStep() uint64 {
	if m != nil {
		return m.SuperStep
	}
	return 0
}

func (m *SuperStepMessage) GetSrcVertexId() string {
	if m != nil {
		return m.SrcVertexId
	}
	return ""
}

func (m *SuperStepMessage) GetDestVertexId() string {
	if m != nil {
		return m.DestVertexId
	}
	return ""
}

func (m *SuperStepMessage) GetMessage() *types.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

type SuperStepMessageAck struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *SuperStepMessageAck) Reset()      { *m = SuperStepMessageAck{} }
func (*SuperStepMessageAck) ProtoMessage() {}
func (*SuperStepMessageAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{11}
}
func (m *SuperStepMessageAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperStepMessageAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperStepMessageAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperStepMessageAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperStepMessageAck.Merge(m, src)
}
func (m *SuperStepMessageAck) XXX_Size() int {
	return m.Size()
}
func (m *SuperStepMessageAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperStepMessageAck.DiscardUnknown(m)
}

var xxx_messageInfo_SuperStepMessageAck proto.InternalMessageInfo

func (m *SuperStepMessageAck) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type InitPartition struct {
	PartitionId uint64 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (m *InitPartition) Reset()      { *m = InitPartition{} }
func (*InitPartition) ProtoMessage() {}
func (*InitPartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{12}
}
func (m *InitPartition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitPartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitPartition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitPartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitPartition.Merge(m, src)
}
func (m *InitPartition) XXX_Size() int {
	return m.Size()
}
func (m *InitPartition) XXX_DiscardUnknown() {
	xxx_messageInfo_InitPartition.DiscardUnknown(m)
}

var xxx_messageInfo_InitPartition proto.InternalMessageInfo

func (m *InitPartition) GetPartitionId() uint64 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

type InitPartitionAck struct {
	PartitionId uint64 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (m *InitPartitionAck) Reset()      { *m = InitPartitionAck{} }
func (*InitPartitionAck) ProtoMessage() {}
func (*InitPartitionAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{13}
}
func (m *InitPartitionAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitPartitionAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitPartitionAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitPartitionAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitPartitionAck.Merge(m, src)
}
func (m *InitPartitionAck) XXX_Size() int {
	return m.Size()
}
func (m *InitPartitionAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InitPartitionAck.DiscardUnknown(m)
}

var xxx_messageInfo_InitPartitionAck proto.InternalMessageInfo

func (m *InitPartitionAck) GetPartitionId() uint64 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

type ClusterInfo struct {
	WorkerInfo []*ClusterInfo_WorkerInfo `protobuf:"bytes,1,rep,name=worker_info,json=workerInfo,proto3" json:"worker_info,omitempty"`
}

func (m *ClusterInfo) Reset()      { *m = ClusterInfo{} }
func (*ClusterInfo) ProtoMessage() {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{14}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetWorkerInfo() []*ClusterInfo_WorkerInfo {
	if m != nil {
		return m.WorkerInfo
	}
	return nil
}

type ClusterInfo_WorkerInfo struct {
	WorkerPid  *actor.PID `protobuf:"bytes,1,opt,name=worker_pid,json=workerPid,proto3" json:"worker_pid,omitempty"`
	Partitions []uint64   `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
}

func (m *ClusterInfo_WorkerInfo) Reset()      { *m = ClusterInfo_WorkerInfo{} }
func (*ClusterInfo_WorkerInfo) ProtoMessage() {}
func (*ClusterInfo_WorkerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{14, 0}
}
func (m *ClusterInfo_WorkerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo_WorkerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo_WorkerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo_WorkerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo_WorkerInfo.Merge(m, src)
}
func (m *ClusterInfo_WorkerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo_WorkerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo_WorkerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo_WorkerInfo proto.InternalMessageInfo

func (m *ClusterInfo_WorkerInfo) GetWorkerPid() *actor.PID {
	if m != nil {
		return m.WorkerPid
	}
	return nil
}

func (m *ClusterInfo_WorkerInfo) GetPartitions() []uint64 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type InitWorker struct {
	Coordinator *actor.PID `protobuf:"bytes,1,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	Partitions  []uint64   `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
}

func (m *InitWorker) Reset()      { *m = InitWorker{} }
func (*InitWorker) ProtoMessage() {}
func (*InitWorker) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{15}
}
func (m *InitWorker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitWorker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitWorker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitWorker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitWorker.Merge(m, src)
}
func (m *InitWorker) XXX_Size() int {
	return m.Size()
}
func (m *InitWorker) XXX_DiscardUnknown() {
	xxx_messageInfo_InitWorker.DiscardUnknown(m)
}

var xxx_messageInfo_InitWorker proto.InternalMessageInfo

func (m *InitWorker) GetCoordinator() *actor.PID {
	if m != nil {
		return m.Coordinator
	}
	return nil
}

func (m *InitWorker) GetPartitions() []uint64 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type InitWorkerAck struct {
	WorkerPid *actor.PID `protobuf:"bytes,1,opt,name=worker_pid,json=workerPid,proto3" json:"worker_pid,omitempty"`
}

func (m *InitWorkerAck) Reset()      { *m = InitWorkerAck{} }
func (*InitWorkerAck) ProtoMessage() {}
func (*InitWorkerAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{16}
}
func (m *InitWorkerAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitWorkerAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitWorkerAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitWorkerAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitWorkerAck.Merge(m, src)
}
func (m *InitWorkerAck) XXX_Size() int {
	return m.Size()
}
func (m *InitWorkerAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InitWorkerAck.DiscardUnknown(m)
}

var xxx_messageInfo_InitWorkerAck proto.InternalMessageInfo

func (m *InitWorkerAck) GetWorkerPid() *actor.PID {
	if m != nil {
		return m.WorkerPid
	}
	return nil
}

type NewCluster struct {
	Workers        []*NewCluster_WorkerReq `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	NrOfPartitions uint64                  `protobuf:"varint,2,opt,name=nr_of_partitions,json=nrOfPartitions,proto3" json:"nr_of_partitions,omitempty"`
}

func (m *NewCluster) Reset()      { *m = NewCluster{} }
func (*NewCluster) ProtoMessage() {}
func (*NewCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{17}
}
func (m *NewCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCluster.Merge(m, src)
}
func (m *NewCluster) XXX_Size() int {
	return m.Size()
}
func (m *NewCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCluster.DiscardUnknown(m)
}

var xxx_messageInfo_NewCluster proto.InternalMessageInfo

func (m *NewCluster) GetWorkers() []*NewCluster_WorkerReq {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *NewCluster) GetNrOfPartitions() uint64 {
	if m != nil {
		return m.NrOfPartitions
	}
	return 0
}

type NewCluster_WorkerReq struct {
	Remote      bool   `protobuf:"varint,1,opt,name=remote,proto3" json:"remote,omitempty"`
	HostAndPort string `protobuf:"bytes,2,opt,name=host_and_port,json=hostAndPort,proto3" json:"host_and_port,omitempty"`
}

func (m *NewCluster_WorkerReq) Reset()      { *m = NewCluster_WorkerReq{} }
func (*NewCluster_WorkerReq) ProtoMessage() {}
func (*NewCluster_WorkerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{17, 0}
}
func (m *NewCluster_WorkerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCluster_WorkerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCluster_WorkerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCluster_WorkerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCluster_WorkerReq.Merge(m, src)
}
func (m *NewCluster_WorkerReq) XXX_Size() int {
	return m.Size()
}
func (m *NewCluster_WorkerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCluster_WorkerReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewCluster_WorkerReq proto.InternalMessageInfo

func (m *NewCluster_WorkerReq) GetRemote() bool {
	if m != nil {
		return m.Remote
	}
	return false
}

func (m *NewCluster_WorkerReq) GetHostAndPort() string {
	if m != nil {
		return m.HostAndPort
	}
	return ""
}

type NewClusterAck struct {
}

func (m *NewClusterAck) Reset()      { *m = NewClusterAck{} }
func (*NewClusterAck) ProtoMessage() {}
func (*NewClusterAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{18}
}
func (m *NewClusterAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewClusterAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewClusterAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewClusterAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewClusterAck.Merge(m, src)
}
func (m *NewClusterAck) XXX_Size() int {
	return m.Size()
}
func (m *NewClusterAck) XXX_DiscardUnknown() {
	xxx_messageInfo_NewClusterAck.DiscardUnknown(m)
}

var xxx_messageInfo_NewClusterAck proto.InternalMessageInfo

type CoordinatorStats struct {
}

func (m *CoordinatorStats) Reset()      { *m = CoordinatorStats{} }
func (*CoordinatorStats) ProtoMessage() {}
func (*CoordinatorStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{19}
}
func (m *CoordinatorStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorStats.Merge(m, src)
}
func (m *CoordinatorStats) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorStats.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorStats proto.InternalMessageInfo

type CoordinatorStatsAck struct {
	SuperStep        uint64 `protobuf:"varint,1,opt,name=super_step,json=superStep,proto3" json:"super_step,omitempty"`
	NrOfActiveVertex uint64 `protobuf:"varint,2,opt,name=nr_of_active_vertex,json=nrOfActiveVertex,proto3" json:"nr_of_active_vertex,omitempty"`
	NrOfSentMessages uint64 `protobuf:"varint,3,opt,name=nr_of_sent_messages,json=nrOfSentMessages,proto3" json:"nr_of_sent_messages,omitempty"`
	State            string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CoordinatorStatsAck) Reset()      { *m = CoordinatorStatsAck{} }
func (*CoordinatorStatsAck) ProtoMessage() {}
func (*CoordinatorStatsAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{20}
}
func (m *CoordinatorStatsAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorStatsAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorStatsAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorStatsAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorStatsAck.Merge(m, src)
}
func (m *CoordinatorStatsAck) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorStatsAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorStatsAck.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorStatsAck proto.InternalMessageInfo

func (m *CoordinatorStatsAck) GetSuperStep() uint64 {
	if m != nil {
		return m.SuperStep
	}
	return 0
}

func (m *CoordinatorStatsAck) GetNrOfActiveVertex() uint64 {
	if m != nil {
		return m.NrOfActiveVertex
	}
	return 0
}

func (m *CoordinatorStatsAck) GetNrOfSentMessages() uint64 {
	if m != nil {
		return m.NrOfSentMessages
	}
	return 0
}

func (m *CoordinatorStatsAck) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type StartSuperStep struct {
}

func (m *StartSuperStep) Reset()      { *m = StartSuperStep{} }
func (*StartSuperStep) ProtoMessage() {}
func (*StartSuperStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{21}
}
func (m *StartSuperStep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartSuperStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartSuperStep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartSuperStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSuperStep.Merge(m, src)
}
func (m *StartSuperStep) XXX_Size() int {
	return m.Size()
}
func (m *StartSuperStep) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSuperStep.DiscardUnknown(m)
}

var xxx_messageInfo_StartSuperStep proto.InternalMessageInfo

type ShowAggregatedValue struct {
}

func (m *ShowAggregatedValue) Reset()      { *m = ShowAggregatedValue{} }
func (*ShowAggregatedValue) ProtoMessage() {}
func (*ShowAggregatedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{22}
}
func (m *ShowAggregatedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowAggregatedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowAggregatedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowAggregatedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowAggregatedValue.Merge(m, src)
}
func (m *ShowAggregatedValue) XXX_Size() int {
	return m.Size()
}
func (m *ShowAggregatedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowAggregatedValue.DiscardUnknown(m)
}

var xxx_messageInfo_ShowAggregatedValue proto.InternalMessageInfo

type ShowAggregatedValueAck struct {
	AggregatedValues map[string]string `protobuf:"bytes,1,rep,name=aggregated_values,json=aggregatedValues,proto3" json:"aggregated_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ShowAggregatedValueAck) Reset()      { *m = ShowAggregatedValueAck{} }
func (*ShowAggregatedValueAck) ProtoMessage() {}
func (*ShowAggregatedValueAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{23}
}
func (m *ShowAggregatedValueAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowAggregatedValueAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowAggregatedValueAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowAggregatedValueAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowAggregatedValueAck.Merge(m, src)
}
func (m *ShowAggregatedValueAck) XXX_Size() int {
	return m.Size()
}
func (m *ShowAggregatedValueAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowAggregatedValueAck.DiscardUnknown(m)
}

var xxx_messageInfo_ShowAggregatedValueAck proto.InternalMessageInfo

func (m *ShowAggregatedValueAck) GetAggregatedValues() map[string]string {
	if m != nil {
		return m.AggregatedValues
	}
	return nil
}

func init() {
	proto.RegisterType((*LoadVertex)(nil), "LoadVertex")
	proto.RegisterType((*LoadVertexAck)(nil), "LoadVertexAck")
	proto.RegisterType((*SuperStepBarrier)(nil), "SuperStepBarrier")
	proto.RegisterType((*SuperStepBarrierAck)(nil), "SuperStepBarrierAck")
	proto.RegisterType((*SuperStepBarrierPartitionAck)(nil), "SuperStepBarrierPartitionAck")
	proto.RegisterType((*SuperStepBarrierWorkerAck)(nil), "SuperStepBarrierWorkerAck")
	proto.RegisterType((*Compute)(nil), "Compute")
	proto.RegisterMapType((map[string]*types.Any)(nil), "Compute.AggregatedValuesEntry")
	proto.RegisterType((*ComputeAck)(nil), "ComputeAck")
	proto.RegisterMapType((map[string]*types.Any)(nil), "ComputeAck.AggregatedValuesEntry")
	proto.RegisterType((*ComputePartitionAck)(nil), "ComputePartitionAck")
	proto.RegisterMapType((map[string]*types.Any)(nil), "ComputePartitionAck.AggregatedValuesEntry")
	proto.RegisterType((*ComputeWorkerAck)(nil), "ComputeWorkerAck")
	proto.RegisterMapType((map[string]*types.Any)(nil), "ComputeWorkerAck.AggregatedValuesEntry")
	proto.RegisterType((*SuperStepMessage)(nil), "SuperStepMessage")
	proto.RegisterType((*SuperStepMessageAck)(nil), "SuperStepMessageAck")
	proto.RegisterType((*InitPartition)(nil), "InitPartition")
	proto.RegisterType((*InitPartitionAck)(nil), "InitPartitionAck")
	proto.RegisterType((*ClusterInfo)(nil), "ClusterInfo")
	proto.RegisterType((*ClusterInfo_WorkerInfo)(nil), "ClusterInfo.WorkerInfo")
	proto.RegisterType((*InitWorker)(nil), "InitWorker")
	proto.RegisterType((*InitWorkerAck)(nil), "InitWorkerAck")
	proto.RegisterType((*NewCluster)(nil), "NewCluster")
	proto.RegisterType((*NewCluster_WorkerReq)(nil), "NewCluster.WorkerReq")
	proto.RegisterType((*NewClusterAck)(nil), "NewClusterAck")
	proto.RegisterType((*CoordinatorStats)(nil), "CoordinatorStats")
	proto.RegisterType((*CoordinatorStatsAck)(nil), "CoordinatorStatsAck")
	proto.RegisterType((*StartSuperStep)(nil), "StartSuperStep")
	proto.RegisterType((*ShowAggregatedValue)(nil), "ShowAggregatedValue")
	proto.RegisterType((*ShowAggregatedValueAck)(nil), "ShowAggregatedValueAck")
	proto.RegisterMapType((map[string]string)(nil), "ShowAggregatedValueAck.AggregatedValuesEntry")
}

func init() { proto.RegisterFile("command.proto", fileDescriptor_213c0bb044472049) }

var fileDescriptor_213c0bb044472049 = []byte{
	// 914 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x3b, 0x6f, 0x1b, 0x47,
	0x10, 0xe6, 0xea, 0x61, 0x89, 0x73, 0xa6, 0xc2, 0x9c, 0x24, 0x87, 0x56, 0x92, 0x83, 0x7d, 0x08,
	0x10, 0xc9, 0x88, 0x96, 0x00, 0xf3, 0x80, 0xe1, 0x8e, 0x52, 0x1e, 0x20, 0x92, 0x38, 0xc2, 0xd1,
	0x90, 0x10, 0x37, 0x87, 0xd5, 0xdd, 0x92, 0x3a, 0x50, 0xdc, 0x65, 0x76, 0x97, 0x52, 0xd8, 0xe5,
	0x27, 0xe4, 0x27, 0xa4, 0x74, 0x99, 0x36, 0x55, 0xda, 0x94, 0x2a, 0x5d, 0x46, 0x54, 0x93, 0x22,
	0x08, 0xfc, 0x13, 0x82, 0x7d, 0xf0, 0x48, 0x11, 0xb4, 0x25, 0xab, 0x52, 0xb7, 0x3b, 0xf3, 0xcd,
	0xdc, 0x7c, 0xf3, 0xda, 0x83, 0x52, 0xc2, 0xbb, 0x5d, 0xc2, 0x52, 0xdc, 0x13, 0x5c, 0xf1, 0x8d,
	0xfb, 0x6d, 0xce, 0xdb, 0xc7, 0xb4, 0x6a, 0x6e, 0x87, 0xfd, 0x56, 0x95, 0xb0, 0x81, 0x53, 0x7d,
	0xd1, 0xce, 0xd4, 0x51, 0xff, 0x10, 0x27, 0xbc, 0x5b, 0xad, 0xcb, 0x01, 0xeb, 0x08, 0xce, 0x1a,
	0xcf, 0x2c, 0x92, 0x24, 0x8a, 0x8b, 0xed, 0x36, 0xaf, 0x9a, 0x83, 0x95, 0x49, 0x6b, 0x17, 0x6e,
	0x01, 0x7c, 0xc7, 0x49, 0xba, 0x4f, 0x85, 0xa2, 0x3f, 0xfb, 0xef, 0x43, 0xf1, 0xc4, 0x9c, 0xe2,
	0x2c, 0xad, 0xa0, 0x07, 0x68, 0xb3, 0x18, 0x2d, 0x5b, 0x41, 0x23, 0x0d, 0x77, 0xa0, 0x34, 0x86,
	0xd6, 0x93, 0xce, 0x1b, 0xd1, 0xfe, 0x1a, 0x2c, 0x52, 0x21, 0xb8, 0xa8, 0xcc, 0x19, 0x85, 0xbd,
	0x84, 0x3e, 0x94, 0x9b, 0xfd, 0x1e, 0x15, 0x4d, 0x45, 0x7b, 0x3b, 0x44, 0x88, 0x8c, 0x8a, 0xb0,
	0x06, 0xab, 0xd3, 0xb2, 0xab, 0xbc, 0x87, 0x75, 0xf8, 0x60, 0xda, 0x66, 0x8f, 0x08, 0x95, 0xa9,
	0x8c, 0x33, 0x6d, 0xfc, 0x10, 0xee, 0xf6, 0x46, 0xf7, 0x91, 0xfd, 0x42, 0xe4, 0xe5, 0xb2, 0x46,
	0x1a, 0x7e, 0x0d, 0xf7, 0xa7, 0x5d, 0x1c, 0x70, 0xd1, 0xb1, 0x1f, 0xdf, 0x02, 0x38, 0x35, 0x97,
	0xb8, 0xe7, 0xac, 0xbd, 0x1a, 0x60, 0x93, 0x3f, 0xbc, 0xd7, 0xf8, 0x32, 0x2a, 0x5a, 0xed, 0x5e,
	0x96, 0x86, 0x67, 0x08, 0x96, 0x76, 0x79, 0xb7, 0xd7, 0x57, 0xd4, 0xff, 0x10, 0x40, 0x6a, 0x9f,
	0xb1, 0x54, 0xb4, 0xe7, 0x3e, 0x5a, 0x94, 0xa3, 0xaf, 0xf8, 0xdf, 0xc2, 0xbb, 0xa4, 0xdd, 0x16,
	0xb4, 0x4d, 0x14, 0x4d, 0xe3, 0x13, 0x72, 0xdc, 0xa7, 0xb2, 0x32, 0xf7, 0x60, 0x7e, 0xd3, 0xab,
	0x05, 0xd8, 0xf9, 0xc0, 0xf5, 0x1c, 0xb1, 0x6f, 0x00, 0x5f, 0x31, 0x25, 0x06, 0x51, 0x99, 0x4c,
	0x89, 0x37, 0x7e, 0x84, 0xf5, 0x99, 0x50, 0xbf, 0x0c, 0xf3, 0x1d, 0x3a, 0x70, 0x29, 0xd3, 0x47,
	0xff, 0x11, 0x2c, 0x9a, 0x8f, 0x99, 0x5a, 0x78, 0xb5, 0x35, 0x6c, 0xfb, 0x08, 0x8f, 0xfa, 0x08,
	0xd7, 0xd9, 0x20, 0xb2, 0x90, 0x27, 0x73, 0x8f, 0x51, 0xf8, 0x2f, 0x02, 0x70, 0xe1, 0x5c, 0x59,
	0xe7, 0x7b, 0x70, 0xe7, 0x88, 0x1c, 0x2b, 0x9a, 0x1a, 0xe7, 0xcb, 0x91, 0xbb, 0xf9, 0x4f, 0x67,
	0x71, 0x9d, 0x37, 0x5c, 0x1f, 0xe2, 0xb1, 0xf3, 0x5b, 0x42, 0x77, 0xd5, 0x45, 0xf4, 0x96, 0x4d,
	0xe4, 0x1f, 0xbc, 0xbe, 0xa2, 0x8f, 0xf0, 0x0c, 0x9f, 0xb7, 0x81, 0xee, 0x7f, 0x08, 0xca, 0x2e,
	0xb4, 0x9b, 0x34, 0xbc, 0xff, 0xec, 0xf5, 0x9c, 0x3f, 0xc6, 0xd3, 0x8e, 0x6f, 0x03, 0xe1, 0x3f,
	0xd1, 0xc4, 0xd6, 0xf9, 0x9e, 0x4a, 0x49, 0xda, 0xd4, 0xf7, 0x61, 0xa1, 0xdf, 0xcf, 0xfb, 0xd9,
	0x9c, 0xa7, 0xc6, 0x77, 0x6e, 0x7a, 0x7c, 0x43, 0x28, 0x49, 0x91, 0xc4, 0xe3, 0x59, 0x98, 0x37,
	0xb6, 0x9e, 0x14, 0xc9, 0xfe, 0x68, 0x1c, 0x3e, 0x82, 0x95, 0x94, 0x4a, 0x35, 0x01, 0x5a, 0x30,
	0xa0, 0xbb, 0x5a, 0x9a, 0xa3, 0x30, 0x2c, 0x75, 0x6d, 0x1c, 0x95, 0xc5, 0x37, 0x70, 0x18, 0x81,
	0xc2, 0xad, 0x89, 0x15, 0xe9, 0x08, 0xe8, 0xa2, 0xcd, 0xe0, 0x10, 0xd6, 0xa0, 0xd4, 0x60, 0x99,
	0xca, 0x9b, 0xee, 0x3a, 0xab, 0xf0, 0x73, 0x28, 0x5f, 0xb2, 0xb9, 0xe6, 0x06, 0xfd, 0x0d, 0x81,
	0xb7, 0x7b, 0xdc, 0x97, 0x8a, 0x8a, 0x06, 0x6b, 0x71, 0xff, 0x31, 0x78, 0xae, 0x87, 0x32, 0xd6,
	0xe2, 0x15, 0x64, 0x5a, 0xe2, 0x3d, 0x3c, 0x01, 0xc1, 0xb6, 0x2f, 0xf4, 0x31, 0x72, 0xfd, 0xa6,
	0xcf, 0x1b, 0x07, 0x00, 0x63, 0xcd, 0xdb, 0xf4, 0x62, 0x00, 0x90, 0x47, 0x64, 0x9b, 0x70, 0x21,
	0x9a, 0x90, 0x84, 0xcf, 0x01, 0x34, 0x33, 0xeb, 0xdc, 0xff, 0x04, 0xbc, 0x84, 0x73, 0x91, 0x66,
	0x8c, 0x28, 0x2e, 0x66, 0x78, 0x9e, 0x54, 0x5f, 0xe9, 0xfb, 0x89, 0xcd, 0xf4, 0x8d, 0x1e, 0x8d,
	0xdf, 0x11, 0xc0, 0x53, 0x7a, 0xea, 0x52, 0xe3, 0x57, 0x61, 0xc9, 0xea, 0xa4, 0xcb, 0xda, 0x3a,
	0x1e, 0x6b, 0x5d, 0xd2, 0x22, 0xfa, 0x53, 0x34, 0x42, 0xf9, 0x9b, 0x50, 0x66, 0x22, 0xe6, 0xad,
	0xf8, 0x52, 0x84, 0xba, 0x42, 0x2b, 0x4c, 0xfc, 0xd0, 0xca, 0x2b, 0x29, 0x37, 0xbe, 0x81, 0x62,
	0x6e, 0xaf, 0x97, 0xb5, 0xa0, 0x5d, 0xae, 0xa8, 0x89, 0x6e, 0x39, 0x72, 0x37, 0xdd, 0xd9, 0x47,
	0x5c, 0xaa, 0x98, 0xb0, 0x34, 0xee, 0x71, 0xa1, 0xdc, 0xa3, 0xed, 0x69, 0x61, 0x9d, 0xa5, 0x7b,
	0x5c, 0xa8, 0xf0, 0x1d, 0x28, 0x8d, 0x63, 0xaa, 0x27, 0x1d, 0xfd, 0x96, 0xef, 0x8e, 0xd3, 0xd5,
	0x54, 0x44, 0xc9, 0xf0, 0x85, 0x59, 0xa5, 0x97, 0x85, 0x3a, 0x35, 0x57, 0x3c, 0x8c, 0xdb, 0xb0,
	0x6a, 0xe9, 0x90, 0x44, 0x65, 0x27, 0xd4, 0x4d, 0x8f, 0x63, 0x54, 0xd6, 0x8c, 0xea, 0x46, 0xe1,
	0x7e, 0x53, 0x72, 0xb8, 0xa4, 0x4c, 0xc5, 0x6e, 0x48, 0xa4, 0x19, 0x47, 0x07, 0x6f, 0x52, 0xa6,
	0xdc, 0xa0, 0x48, 0xfd, 0x2b, 0x22, 0x15, 0x51, 0xd4, 0x8d, 0xa2, 0xbd, 0x84, 0x65, 0x58, 0x69,
	0x2a, 0x22, 0x54, 0x3e, 0x58, 0xe1, 0x3a, 0xac, 0x36, 0x8f, 0xf8, 0xe9, 0xd4, 0x1a, 0x0a, 0xff,
	0x40, 0x70, 0x6f, 0x86, 0x5c, 0xd3, 0x7a, 0x3e, 0x6b, 0x15, 0xda, 0x0a, 0x6e, 0xe3, 0xd9, 0x36,
	0xd7, 0x5e, 0x88, 0xbb, 0xd7, 0x5f, 0x88, 0x6b, 0x93, 0x0b, 0xb1, 0x38, 0xb1, 0xfa, 0x76, 0x3e,
	0x3b, 0x3b, 0x0f, 0x0a, 0x2f, 0xcf, 0x83, 0xc2, 0xab, 0xf3, 0x00, 0xfd, 0x32, 0x0c, 0xd0, 0x8b,
	0x61, 0x80, 0xfe, 0x1a, 0x06, 0xe8, 0x6c, 0x18, 0xa0, 0xbf, 0x87, 0x01, 0xfa, 0x67, 0x18, 0x14,
	0x5e, 0x0d, 0x03, 0xf4, 0xeb, 0x45, 0x50, 0x38, 0xbb, 0x08, 0x0a, 0x2f, 0x2f, 0x82, 0xc2, 0xe1,
	0x1d, 0xb3, 0x85, 0x3e, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x47, 0xdc, 0x43, 0x0e, 0x7f, 0x0a,
	0x00, 0x00,
}

func (this *LoadVertex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadVertex)
	if !ok {
		that2, ok := that.(LoadVertex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexId != that1.VertexId {
		return false
	}
	return true
}
func (this *LoadVertexAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadVertexAck)
	if !ok {
		that2, ok := that.(LoadVertexAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexId != that1.VertexId {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SuperStepBarrier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperStepBarrier)
	if !ok {
		that2, ok := that.(SuperStepBarrier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SuperStepBarrierAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperStepBarrierAck)
	if !ok {
		that2, ok := that.(SuperStepBarrierAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexId != that1.VertexId {
		return false
	}
	return true
}
func (this *SuperStepBarrierPartitionAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperStepBarrierPartitionAck)
	if !ok {
		that2, ok := that.(SuperStepBarrierPartitionAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionId != that1.PartitionId {
		return false
	}
	return true
}
func (this *SuperStepBarrierWorkerAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperStepBarrierWorkerAck)
	if !ok {
		that2, ok := that.(SuperStepBarrierWorkerAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkerPid.Equal(that1.WorkerPid) {
		return false
	}
	return true
}
func (this *Compute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Compute)
	if !ok {
		that2, ok := that.(Compute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SuperStep != that1.SuperStep {
		return false
	}
	if len(this.AggregatedValues) != len(that1.AggregatedValues) {
		return false
	}
	for i := range this.AggregatedValues {
		if !this.AggregatedValues[i].Equal(that1.AggregatedValues[i]) {
			return false
		}
	}
	return true
}
func (this *ComputeAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputeAck)
	if !ok {
		that2, ok := that.(ComputeAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexId != that1.VertexId {
		return false
	}
	if this.Halted != that1.Halted {
		return false
	}
	if len(this.AggregatedValues) != len(that1.AggregatedValues) {
		return false
	}
	for i := range this.AggregatedValues {
		if !this.AggregatedValues[i].Equal(that1.AggregatedValues[i]) {
			return false
		}
	}
	return true
}
func (this *ComputePartitionAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputePartitionAck)
	if !ok {
		that2, ok := that.(ComputePartitionAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionId != that1.PartitionId {
		return false
	}
	if len(this.AggregatedValues) != len(that1.AggregatedValues) {
		return false
	}
	for i := range this.AggregatedValues {
		if !this.AggregatedValues[i].Equal(that1.AggregatedValues[i]) {
			return false
		}
	}
	return true
}
func (this *ComputeWorkerAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputeWorkerAck)
	if !ok {
		that2, ok := that.(ComputeWorkerAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkerPid.Equal(that1.WorkerPid) {
		return false
	}
	if len(this.AggregatedValues) != len(that1.AggregatedValues) {
		return false
	}
	for i := range this.AggregatedValues {
		if !this.AggregatedValues[i].Equal(that1.AggregatedValues[i]) {
			return false
		}
	}
	return true
}
func (this *SuperStepMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperStepMessage)
	if !ok {
		that2, ok := that.(SuperStepMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.SuperStep != that1.SuperStep {
		return false
	}
	if this.SrcVertexId != that1.SrcVertexId {
		return false
	}
	if this.DestVertexId != that1.DestVertexId {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *SuperStepMessageAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperStepMessageAck)
	if !ok {
		that2, ok := that.(SuperStepMessageAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	return true
}
func (this *InitPartition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitPartition)
	if !ok {
		that2, ok := that.(InitPartition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionId != that1.PartitionId {
		return false
	}
	return true
}
func (this *InitPartitionAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitPartitionAck)
	if !ok {
		that2, ok := that.(InitPartitionAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionId != that1.PartitionId {
		return false
	}
	return true
}
func (this *ClusterInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterInfo)
	if !ok {
		that2, ok := that.(ClusterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WorkerInfo) != len(that1.WorkerInfo) {
		return false
	}
	for i := range this.WorkerInfo {
		if !this.WorkerInfo[i].Equal(that1.WorkerInfo[i]) {
			return false
		}
	}
	return true
}
func (this *ClusterInfo_WorkerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterInfo_WorkerInfo)
	if !ok {
		that2, ok := that.(ClusterInfo_WorkerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkerPid.Equal(that1.WorkerPid) {
		return false
	}
	if len(this.Partitions) != len(that1.Partitions) {
		return false
	}
	for i := range this.Partitions {
		if this.Partitions[i] != that1.Partitions[i] {
			return false
		}
	}
	return true
}
func (this *InitWorker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitWorker)
	if !ok {
		that2, ok := that.(InitWorker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Coordinator.Equal(that1.Coordinator) {
		return false
	}
	if len(this.Partitions) != len(that1.Partitions) {
		return false
	}
	for i := range this.Partitions {
		if this.Partitions[i] != that1.Partitions[i] {
			return false
		}
	}
	return true
}
func (this *InitWorkerAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitWorkerAck)
	if !ok {
		that2, ok := that.(InitWorkerAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkerPid.Equal(that1.WorkerPid) {
		return false
	}
	return true
}
func (this *NewCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCluster)
	if !ok {
		that2, ok := that.(NewCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Workers) != len(that1.Workers) {
		return false
	}
	for i := range this.Workers {
		if !this.Workers[i].Equal(that1.Workers[i]) {
			return false
		}
	}
	if this.NrOfPartitions != that1.NrOfPartitions {
		return false
	}
	return true
}
func (this *NewCluster_WorkerReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCluster_WorkerReq)
	if !ok {
		that2, ok := that.(NewCluster_WorkerReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Remote != that1.Remote {
		return false
	}
	if this.HostAndPort != that1.HostAndPort {
		return false
	}
	return true
}
func (this *NewClusterAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewClusterAck)
	if !ok {
		that2, ok := that.(NewClusterAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CoordinatorStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoordinatorStats)
	if !ok {
		that2, ok := that.(CoordinatorStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CoordinatorStatsAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoordinatorStatsAck)
	if !ok {
		that2, ok := that.(CoordinatorStatsAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SuperStep != that1.SuperStep {
		return false
	}
	if this.NrOfActiveVertex != that1.NrOfActiveVertex {
		return false
	}
	if this.NrOfSentMessages != that1.NrOfSentMessages {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *StartSuperStep) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartSuperStep)
	if !ok {
		that2, ok := that.(StartSuperStep)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ShowAggregatedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShowAggregatedValue)
	if !ok {
		that2, ok := that.(ShowAggregatedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ShowAggregatedValueAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShowAggregatedValueAck)
	if !ok {
		that2, ok := that.(ShowAggregatedValueAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AggregatedValues) != len(that1.AggregatedValues) {
		return false
	}
	for i := range this.AggregatedValues {
		if this.AggregatedValues[i] != that1.AggregatedValues[i] {
			return false
		}
	}
	return true
}
func (this *LoadVertex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.LoadVertex{")
	s = append(s, "VertexId: "+fmt.Sprintf("%#v", this.VertexId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadVertexAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.LoadVertexAck{")
	s = append(s, "VertexId: "+fmt.Sprintf("%#v", this.VertexId)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperStepBarrier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&command.SuperStepBarrier{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperStepBarrierAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.SuperStepBarrierAck{")
	s = append(s, "VertexId: "+fmt.Sprintf("%#v", this.VertexId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperStepBarrierPartitionAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.SuperStepBarrierPartitionAck{")
	s = append(s, "PartitionId: "+fmt.Sprintf("%#v", this.PartitionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperStepBarrierWorkerAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.SuperStepBarrierWorkerAck{")
	if this.WorkerPid != nil {
		s = append(s, "WorkerPid: "+fmt.Sprintf("%#v", this.WorkerPid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Compute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.Compute{")
	s = append(s, "SuperStep: "+fmt.Sprintf("%#v", this.SuperStep)+",\n")
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]*types.Any{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%#v: %#v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	if this.AggregatedValues != nil {
		s = append(s, "AggregatedValues: "+mapStringForAggregatedValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputeAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&command.ComputeAck{")
	s = append(s, "VertexId: "+fmt.Sprintf("%#v", this.VertexId)+",\n")
	s = append(s, "Halted: "+fmt.Sprintf("%#v", this.Halted)+",\n")
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]*types.Any{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%#v: %#v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	if this.AggregatedValues != nil {
		s = append(s, "AggregatedValues: "+mapStringForAggregatedValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputePartitionAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.ComputePartitionAck{")
	s = append(s, "PartitionId: "+fmt.Sprintf("%#v", this.PartitionId)+",\n")
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]*types.Any{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%#v: %#v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	if this.AggregatedValues != nil {
		s = append(s, "AggregatedValues: "+mapStringForAggregatedValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputeWorkerAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.ComputeWorkerAck{")
	if this.WorkerPid != nil {
		s = append(s, "WorkerPid: "+fmt.Sprintf("%#v", this.WorkerPid)+",\n")
	}
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]*types.Any{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%#v: %#v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	if this.AggregatedValues != nil {
		s = append(s, "AggregatedValues: "+mapStringForAggregatedValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperStepMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&command.SuperStepMessage{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "SuperStep: "+fmt.Sprintf("%#v", this.SuperStep)+",\n")
	s = append(s, "SrcVertexId: "+fmt.Sprintf("%#v", this.SrcVertexId)+",\n")
	s = append(s, "DestVertexId: "+fmt.Sprintf("%#v", this.DestVertexId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperStepMessageAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.SuperStepMessageAck{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitPartition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.InitPartition{")
	s = append(s, "PartitionId: "+fmt.Sprintf("%#v", this.PartitionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitPartitionAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.InitPartitionAck{")
	s = append(s, "PartitionId: "+fmt.Sprintf("%#v", this.PartitionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClusterInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.ClusterInfo{")
	if this.WorkerInfo != nil {
		s = append(s, "WorkerInfo: "+fmt.Sprintf("%#v", this.WorkerInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClusterInfo_WorkerInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.ClusterInfo_WorkerInfo{")
	if this.WorkerPid != nil {
		s = append(s, "WorkerPid: "+fmt.Sprintf("%#v", this.WorkerPid)+",\n")
	}
	s = append(s, "Partitions: "+fmt.Sprintf("%#v", this.Partitions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitWorker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.InitWorker{")
	if this.Coordinator != nil {
		s = append(s, "Coordinator: "+fmt.Sprintf("%#v", this.Coordinator)+",\n")
	}
	s = append(s, "Partitions: "+fmt.Sprintf("%#v", this.Partitions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitWorkerAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.InitWorkerAck{")
	if this.WorkerPid != nil {
		s = append(s, "WorkerPid: "+fmt.Sprintf("%#v", this.WorkerPid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.NewCluster{")
	if this.Workers != nil {
		s = append(s, "Workers: "+fmt.Sprintf("%#v", this.Workers)+",\n")
	}
	s = append(s, "NrOfPartitions: "+fmt.Sprintf("%#v", this.NrOfPartitions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewCluster_WorkerReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.NewCluster_WorkerReq{")
	s = append(s, "Remote: "+fmt.Sprintf("%#v", this.Remote)+",\n")
	s = append(s, "HostAndPort: "+fmt.Sprintf("%#v", this.HostAndPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewClusterAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&command.NewClusterAck{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CoordinatorStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&command.CoordinatorStats{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CoordinatorStatsAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&command.CoordinatorStatsAck{")
	s = append(s, "SuperStep: "+fmt.Sprintf("%#v", this.SuperStep)+",\n")
	s = append(s, "NrOfActiveVertex: "+fmt.Sprintf("%#v", this.NrOfActiveVertex)+",\n")
	s = append(s, "NrOfSentMessages: "+fmt.Sprintf("%#v", this.NrOfSentMessages)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartSuperStep) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&command.StartSuperStep{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShowAggregatedValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&command.ShowAggregatedValue{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShowAggregatedValueAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.ShowAggregatedValueAck{")
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]string{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%#v: %#v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	if this.AggregatedValues != nil {
		s = append(s, "AggregatedValues: "+mapStringForAggregatedValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCommand(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LoadVertex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadVertex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VertexId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.VertexId)))
		i += copy(dAtA[i:], m.VertexId)
	}
	return i, nil
}

func (m *LoadVertexAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadVertexAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VertexId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.VertexId)))
		i += copy(dAtA[i:], m.VertexId)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *SuperStepBarrier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperStepBarrier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SuperStepBarrierAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperStepBarrierAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VertexId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.VertexId)))
		i += copy(dAtA[i:], m.VertexId)
	}
	return i, nil
}

func (m *SuperStepBarrierPartitionAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperStepBarrierPartitionAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.PartitionId))
	}
	return i, nil
}

func (m *SuperStepBarrierWorkerAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperStepBarrierWorkerAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.WorkerPid.Size()))
		n1, err := m.WorkerPid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Compute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SuperStep != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.SuperStep))
	}
	if len(m.AggregatedValues) > 0 {
		for k, _ := range m.AggregatedValues {
			dAtA[i] = 0x12
			i++
			v := m.AggregatedValues[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCommand(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCommand(uint64(len(k))) + msgSize
			i = encodeVarintCommand(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommand(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCommand(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *ComputeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VertexId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.VertexId)))
		i += copy(dAtA[i:], m.VertexId)
	}
	if m.Halted {
		dAtA[i] = 0x10
		i++
		if m.Halted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AggregatedValues) > 0 {
		for k, _ := range m.AggregatedValues {
			dAtA[i] = 0x1a
			i++
			v := m.AggregatedValues[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCommand(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCommand(uint64(len(k))) + msgSize
			i = encodeVarintCommand(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommand(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCommand(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *ComputePartitionAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputePartitionAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.PartitionId))
	}
	if len(m.AggregatedValues) > 0 {
		for k, _ := range m.AggregatedValues {
			dAtA[i] = 0x12
			i++
			v := m.AggregatedValues[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCommand(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCommand(uint64(len(k))) + msgSize
			i = encodeVarintCommand(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommand(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCommand(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *ComputeWorkerAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeWorkerAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.WorkerPid.Size()))
		n5, err := m.WorkerPid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.AggregatedValues) > 0 {
		for k, _ := range m.AggregatedValues {
			dAtA[i] = 0x12
			i++
			v := m.AggregatedValues[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCommand(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCommand(uint64(len(k))) + msgSize
			i = encodeVarintCommand(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommand(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCommand(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *SuperStepMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperStepMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if m.SuperStep != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.SuperStep))
	}
	if len(m.SrcVertexId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.SrcVertexId)))
		i += copy(dAtA[i:], m.SrcVertexId)
	}
	if len(m.DestVertexId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.DestVertexId)))
		i += copy(dAtA[i:], m.DestVertexId)
	}
	if m.Message != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.Message.Size()))
		n7, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *SuperStepMessageAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperStepMessageAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	return i, nil
}

func (m *InitPartition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitPartition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.PartitionId))
	}
	return i, nil
}

func (m *InitPartitionAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitPartitionAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.PartitionId))
	}
	return i, nil
}

func (m *ClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WorkerInfo) > 0 {
		for _, msg := range m.WorkerInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommand(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterInfo_WorkerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo_WorkerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.WorkerPid.Size()))
		n8, err := m.WorkerPid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Partitions) > 0 {
		dAtA10 := make([]byte, len(m.Partitions)*10)
		var j9 int
		for _, num := range m.Partitions {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommand(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *InitWorker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitWorker) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coordinator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.Coordinator.Size()))
		n11, err := m.Coordinator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Partitions) > 0 {
		dAtA13 := make([]byte, len(m.Partitions)*10)
		var j12 int
		for _, num := range m.Partitions {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommand(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	return i, nil
}

func (m *InitWorkerAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitWorkerAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.WorkerPid.Size()))
		n14, err := m.WorkerPid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *NewCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCluster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workers) > 0 {
		for _, msg := range m.Workers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommand(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NrOfPartitions != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.NrOfPartitions))
	}
	return i, nil
}

func (m *NewCluster_WorkerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCluster_WorkerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Remote {
		dAtA[i] = 0x8
		i++
		if m.Remote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HostAndPort) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.HostAndPort)))
		i += copy(dAtA[i:], m.HostAndPort)
	}
	return i, nil
}

func (m *NewClusterAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewClusterAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CoordinatorStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CoordinatorStatsAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorStatsAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SuperStep != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.SuperStep))
	}
	if m.NrOfActiveVertex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.NrOfActiveVertex))
	}
	if m.NrOfSentMessages != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.NrOfSentMessages))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	return i, nil
}

func (m *StartSuperStep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartSuperStep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ShowAggregatedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowAggregatedValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ShowAggregatedValueAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowAggregatedValueAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AggregatedValues) > 0 {
		for k, _ := range m.AggregatedValues {
			dAtA[i] = 0xa
			i++
			v := m.AggregatedValues[k]
			mapSize := 1 + len(k) + sovCommand(uint64(len(k))) + 1 + len(v) + sovCommand(uint64(len(v)))
			i = encodeVarintCommand(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommand(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommand(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoadVertex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *LoadVertexAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *SuperStepBarrier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SuperStepBarrierAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *SuperStepBarrierPartitionAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionId != 0 {
		n += 1 + sovCommand(uint64(m.PartitionId))
	}
	return n
}

func (m *SuperStepBarrierWorkerAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerPid != nil {
		l = m.WorkerPid.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *Compute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SuperStep != 0 {
		n += 1 + sovCommand(uint64(m.SuperStep))
	}
	if len(m.AggregatedValues) > 0 {
		for k, v := range m.AggregatedValues {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCommand(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCommand(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCommand(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ComputeAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Halted {
		n += 2
	}
	if len(m.AggregatedValues) > 0 {
		for k, v := range m.AggregatedValues {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCommand(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCommand(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCommand(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ComputePartitionAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionId != 0 {
		n += 1 + sovCommand(uint64(m.PartitionId))
	}
	if len(m.AggregatedValues) > 0 {
		for k, v := range m.AggregatedValues {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCommand(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCommand(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCommand(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ComputeWorkerAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerPid != nil {
		l = m.WorkerPid.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if len(m.AggregatedValues) > 0 {
		for k, v := range m.AggregatedValues {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCommand(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCommand(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCommand(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SuperStepMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.SuperStep != 0 {
		n += 1 + sovCommand(uint64(m.SuperStep))
	}
	l = len(m.SrcVertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.DestVertexId)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *SuperStepMessageAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *InitPartition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionId != 0 {
		n += 1 + sovCommand(uint64(m.PartitionId))
	}
	return n
}

func (m *InitPartitionAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionId != 0 {
		n += 1 + sovCommand(uint64(m.PartitionId))
	}
	return n
}

func (m *ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkerInfo) > 0 {
		for _, e := range m.WorkerInfo {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	return n
}

func (m *ClusterInfo_WorkerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerPid != nil {
		l = m.WorkerPid.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovCommand(uint64(e))
		}
		n += 1 + sovCommand(uint64(l)) + l
	}
	return n
}

func (m *InitWorker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coordinator != nil {
		l = m.Coordinator.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovCommand(uint64(e))
		}
		n += 1 + sovCommand(uint64(l)) + l
	}
	return n
}

func (m *InitWorkerAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerPid != nil {
		l = m.WorkerPid.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *NewCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workers) > 0 {
		for _, e := range m.Workers {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.NrOfPartitions != 0 {
		n += 1 + sovCommand(uint64(m.NrOfPartitions))
	}
	return n
}

func (m *NewCluster_WorkerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Remote {
		n += 2
	}
	l = len(m.HostAndPort)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *NewClusterAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CoordinatorStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CoordinatorStatsAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SuperStep != 0 {
		n += 1 + sovCommand(uint64(m.SuperStep))
	}
	if m.NrOfActiveVertex != 0 {
		n += 1 + sovCommand(uint64(m.NrOfActiveVertex))
	}
	if m.NrOfSentMessages != 0 {
		n += 1 + sovCommand(uint64(m.NrOfSentMessages))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *StartSuperStep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShowAggregatedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShowAggregatedValueAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregatedValues) > 0 {
		for k, v := range m.AggregatedValues {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommand(uint64(len(k))) + 1 + len(v) + sovCommand(uint64(len(v)))
			n += mapEntrySize + 1 + sovCommand(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCommand(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoadVertex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadVertex{`,
		`VertexId:` + fmt.Sprintf("%v", this.VertexId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadVertexAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadVertexAck{`,
		`VertexId:` + fmt.Sprintf("%v", this.VertexId) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuperStepBarrier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperStepBarrier{`,
		`}`,
	}, "")
	return s
}
func (this *SuperStepBarrierAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperStepBarrierAck{`,
		`VertexId:` + fmt.Sprintf("%v", this.VertexId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuperStepBarrierPartitionAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperStepBarrierPartitionAck{`,
		`PartitionId:` + fmt.Sprintf("%v", this.PartitionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuperStepBarrierWorkerAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperStepBarrierWorkerAck{`,
		`WorkerPid:` + strings.Replace(fmt.Sprintf("%v", this.WorkerPid), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Compute) String() string {
	if this == nil {
		return "nil"
	}
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]*types.Any{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%v: %v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	s := strings.Join([]string{`&Compute{`,
		`SuperStep:` + fmt.Sprintf("%v", this.SuperStep) + `,`,
		`AggregatedValues:` + mapStringForAggregatedValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputeAck) String() string {
	if this == nil {
		return "nil"
	}
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]*types.Any{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%v: %v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	s := strings.Join([]string{`&ComputeAck{`,
		`VertexId:` + fmt.Sprintf("%v", this.VertexId) + `,`,
		`Halted:` + fmt.Sprintf("%v", this.Halted) + `,`,
		`AggregatedValues:` + mapStringForAggregatedValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputePartitionAck) String() string {
	if this == nil {
		return "nil"
	}
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]*types.Any{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%v: %v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	s := strings.Join([]string{`&ComputePartitionAck{`,
		`PartitionId:` + fmt.Sprintf("%v", this.PartitionId) + `,`,
		`AggregatedValues:` + mapStringForAggregatedValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputeWorkerAck) String() string {
	if this == nil {
		return "nil"
	}
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]*types.Any{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%v: %v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	s := strings.Join([]string{`&ComputeWorkerAck{`,
		`WorkerPid:` + strings.Replace(fmt.Sprintf("%v", this.WorkerPid), "PID", "actor.PID", 1) + `,`,
		`AggregatedValues:` + mapStringForAggregatedValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuperStepMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperStepMessage{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`SuperStep:` + fmt.Sprintf("%v", this.SuperStep) + `,`,
		`SrcVertexId:` + fmt.Sprintf("%v", this.SrcVertexId) + `,`,
		`DestVertexId:` + fmt.Sprintf("%v", this.DestVertexId) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuperStepMessageAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperStepMessageAck{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitPartition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitPartition{`,
		`PartitionId:` + fmt.Sprintf("%v", this.PartitionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitPartitionAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitPartitionAck{`,
		`PartitionId:` + fmt.Sprintf("%v", this.PartitionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterInfo{`,
		`WorkerInfo:` + strings.Replace(fmt.Sprintf("%v", this.WorkerInfo), "ClusterInfo_WorkerInfo", "ClusterInfo_WorkerInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterInfo_WorkerInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterInfo_WorkerInfo{`,
		`WorkerPid:` + strings.Replace(fmt.Sprintf("%v", this.WorkerPid), "PID", "actor.PID", 1) + `,`,
		`Partitions:` + fmt.Sprintf("%v", this.Partitions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitWorker) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitWorker{`,
		`Coordinator:` + strings.Replace(fmt.Sprintf("%v", this.Coordinator), "PID", "actor.PID", 1) + `,`,
		`Partitions:` + fmt.Sprintf("%v", this.Partitions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitWorkerAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitWorkerAck{`,
		`WorkerPid:` + strings.Replace(fmt.Sprintf("%v", this.WorkerPid), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewCluster{`,
		`Workers:` + strings.Replace(fmt.Sprintf("%v", this.Workers), "NewCluster_WorkerReq", "NewCluster_WorkerReq", 1) + `,`,
		`NrOfPartitions:` + fmt.Sprintf("%v", this.NrOfPartitions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewCluster_WorkerReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewCluster_WorkerReq{`,
		`Remote:` + fmt.Sprintf("%v", this.Remote) + `,`,
		`HostAndPort:` + fmt.Sprintf("%v", this.HostAndPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewClusterAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewClusterAck{`,
		`}`,
	}, "")
	return s
}
func (this *CoordinatorStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CoordinatorStats{`,
		`}`,
	}, "")
	return s
}
func (this *CoordinatorStatsAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CoordinatorStatsAck{`,
		`SuperStep:` + fmt.Sprintf("%v", this.SuperStep) + `,`,
		`NrOfActiveVertex:` + fmt.Sprintf("%v", this.NrOfActiveVertex) + `,`,
		`NrOfSentMessages:` + fmt.Sprintf("%v", this.NrOfSentMessages) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartSuperStep) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartSuperStep{`,
		`}`,
	}, "")
	return s
}
func (this *ShowAggregatedValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShowAggregatedValue{`,
		`}`,
	}, "")
	return s
}
func (this *ShowAggregatedValueAck) String() string {
	if this == nil {
		return "nil"
	}
	keysForAggregatedValues := make([]string, 0, len(this.AggregatedValues))
	for k, _ := range this.AggregatedValues {
		keysForAggregatedValues = append(keysForAggregatedValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAggregatedValues)
	mapStringForAggregatedValues := "map[string]string{"
	for _, k := range keysForAggregatedValues {
		mapStringForAggregatedValues += fmt.Sprintf("%v: %v,", k, this.AggregatedValues[k])
	}
	mapStringForAggregatedValues += "}"
	s := strings.Join([]string{`&ShowAggregatedValueAck{`,
		`AggregatedValues:` + mapStringForAggregatedValues + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommand(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoadVertex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadVertex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadVertex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadVertexAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadVertexAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadVertexAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperStepBarrier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperStepBarrier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperStepBarrier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperStepBarrierAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperStepBarrierAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperStepBarrierAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperStepBarrierPartitionAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperStepBarrierPartitionAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperStepBarrierPartitionAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperStepBarrierWorkerAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperStepBarrierWorkerAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperStepBarrierWorkerAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerPid == nil {
				m.WorkerPid = &actor.PID{}
			}
			if err := m.WorkerPid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Compute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperStep", wireType)
			}
			m.SuperStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperStep |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregatedValues == nil {
				m.AggregatedValues = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCommand
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCommand
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommand(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommand
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AggregatedValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Halted = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregatedValues == nil {
				m.AggregatedValues = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCommand
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCommand
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommand(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommand
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AggregatedValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputePartitionAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputePartitionAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputePartitionAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregatedValues == nil {
				m.AggregatedValues = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCommand
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCommand
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommand(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommand
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AggregatedValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeWorkerAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeWorkerAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeWorkerAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerPid == nil {
				m.WorkerPid = &actor.PID{}
			}
			if err := m.WorkerPid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregatedValues == nil {
				m.AggregatedValues = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCommand
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCommand
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommand(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommand
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AggregatedValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperStepMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperStepMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperStepMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperStep", wireType)
			}
			m.SuperStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperStep |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcVertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcVertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestVertexId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestVertexId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &types.Any{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperStepMessageAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperStepMessageAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperStepMessageAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitPartition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitPartition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitPartition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitPartitionAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitPartitionAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitPartitionAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerInfo = append(m.WorkerInfo, &ClusterInfo_WorkerInfo{})
			if err := m.WorkerInfo[len(m.WorkerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo_WorkerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerPid == nil {
				m.WorkerPid = &actor.PID{}
			}
			if err := m.WorkerPid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommand
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommand
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitWorker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitWorker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitWorker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinator == nil {
				m.Coordinator = &actor.PID{}
			}
			if err := m.Coordinator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommand
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommand
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitWorkerAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitWorkerAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitWorkerAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerPid == nil {
				m.WorkerPid = &actor.PID{}
			}
			if err := m.WorkerPid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, &NewCluster_WorkerReq{})
			if err := m.Workers[len(m.Workers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfPartitions", wireType)
			}
			m.NrOfPartitions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfPartitions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCluster_WorkerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Remote = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAndPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAndPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewClusterAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewClusterAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewClusterAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordinatorStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordinatorStatsAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorStatsAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorStatsAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperStep", wireType)
			}
			m.SuperStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperStep |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfActiveVertex", wireType)
			}
			m.NrOfActiveVertex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfActiveVertex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfSentMessages", wireType)
			}
			m.NrOfSentMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfSentMessages |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartSuperStep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSuperStep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSuperStep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowAggregatedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowAggregatedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowAggregatedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowAggregatedValueAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowAggregatedValueAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowAggregatedValueAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregatedValues == nil {
				m.AggregatedValues = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCommand
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCommand
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommand(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommand
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AggregatedValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCommand
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommand(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCommand
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommand = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand   = fmt.Errorf("proto: integer overflow")
)
