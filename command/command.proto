syntax = "proto3";

import "google/protobuf/any.proto";
import "github.com/AsynkronIT/protoactor-go/actor/protos.proto";

message LoadVertex {
    string vertex_id = 1;
}
message LoadVertexAck {
    string vertex_id = 1;
    string error = 2;
}
message LoadPartitionVertices {
    uint64 num_of_partitions = 1;
}
message LoadPartitionVerticesAck {
    uint64 partition_id = 1;
    string error = 2;
}
message LoadPartitionVerticesWorkerAck {
    actor.PID worker_pid = 1;
}

message SuperStepBarrier {}
message SuperStepBarrierAck {
    string vertex_id = 1;
}
message SuperStepBarrierPartitionAck {
    uint64 partition_id = 1;
}
message SuperStepBarrierWorkerAck {
    actor.PID worker_pid = 1;
}

message Compute {
    uint64 super_step = 1;
    map<string, google.protobuf.Any> aggregated_values = 2;
}
message ComputeAck {
    string vertex_id = 1;
    bool halted = 2;
    map<string, google.protobuf.Any> aggregated_values = 3;
}
message ComputePartitionAck {
    uint64 partition_id = 1;
    map<string, google.protobuf.Any> aggregated_values = 2;
}
message ComputeWorkerAck {
    actor.PID worker_pid = 1;
    map<string, google.protobuf.Any> aggregated_values = 2;
}

message SuperStepMessage {
    string uuid = 1;
    uint64 super_step = 2;
    string src_vertex_id = 3;
    string dest_vertex_id = 4;
    google.protobuf.Any message = 5;
}

message SuperStepMessageAck {
    string uuid = 1;
}

message InitPartition {
    uint64 partition_id = 1;
}
message InitPartitionAck {
    uint64 partition_id = 1;
}

message ClusterInfo {
    message WorkerInfo {
        actor.PID worker_pid = 1;
        repeated uint64 partitions = 2;
    }
    repeated WorkerInfo worker_info = 1;
}

message InitWorker {
    actor.PID coordinator = 1;
    repeated uint64 partitions = 2;
}

message InitWorkerAck {
    actor.PID worker_pid = 1;
}

message NewCluster {
    message WorkerReq {
        bool remote = 1;
        string host_and_port = 2;
    }
    repeated WorkerReq workers = 1;
    uint64 nr_of_partitions = 2;
}
message NewClusterAck {}

message CoordinatorStats {}
message CoordinatorStatsAck {
    uint64 super_step = 1;
    uint64 nr_of_active_vertex = 2;
    uint64 nr_of_sent_messages = 3;
    string state = 4;
}

message StartSuperStep{}

message ShowAggregatedValue {}
message ShowAggregatedValueAck {
    map<string, string> aggregated_values = 1;
}

message Shutdown {}
message ShutdownAck {}
